#!/bin/bash
#Bash Shell Script Database Management System project -ITI-CU-Python2023(DBMS)@Dina Aly
# Databases storage
declare -A databases

# Prompt user to select an option 
function menu() {
    echo "1. Create Database"
    echo "2. List Databases" 
    echo "3. Connect To Database"
    echo "4. Drop Database"
    echo "5. Exit"
    read -p "Select an option: " option
}

# Create a new database
function create_db() {
    read -p "Enter database name: " db_name
    databases[$db_name]=1
    echo "Database $db_name created!"
}



# List existing databases
function list_db() {
    for db in "${!databases[@]}"
    do
        echo $db
    done
}



# Connect to a database 
function connect_db() {
    read -p "Enter database name: " db_name
    if [[ ${databases[$db_name]} ]] 
    then
        echo "Connected to $db_name!" 
        db_menu 
    else
        echo "Database $db_name does not exist!"
    fi  
}




# Function to drop a database
function drop_db() {
  read -p "Enter the name of the database you want to drop: " db_name
  if [ -d "$db_name" ]; then
    read -p "Are you sure you want to drop the database $db_name? (y/n): " confirmation
    if [ "$confirmation" = "y" ]; then
      rm -r "$db_name"
      echo "Database $db_name dropped successfully."
    else
      echo "Database $db_name not dropped."
    fi
  else
    echo "Database $db_name not found."
  fi
}


# Database menu 
function db_menu() {
    echo "1. Create Table" 
    echo "2. List Tables"
    echo "3. Drop Table"
    echo "4. Insert Into Table"
    echo "5. Select From Table" 
    echo "6. Delete From Table"
    echo "7. Update Table"
    echo "8. Disconnect"
    read -p "Select an option: " option
}

# Main menu options
while true
do
    menu
    case $option in
        1) create_db;;
        2) list_db;;
        3) connect_db;; 
        4) drop_dp;;
        5) break;;
    esac
done

echo "Thank you!"


# Database menu options

while true
do
   db_menu
    case $option in
        1) create_table;;
        2) list_tables;;
        3) drop_table;; 
        4) insert_into_table;;
        5) select_from_table;;
        6) delete_from_table;;
        7) update_table;;
        8) break;;
    esac
done

echo "Thank you!"

# Create a new table 
function create_table() {
    # Get table name and column info
    read -p "Enter table name: " table_name
    echo "Enter column names and datatypes (space separated): "
    read cols
    declare -a col_array=($cols)
    
    # Create table in database
    echo "Table $table_name created with columns: "
    for i in "${col_array[@]}"
    do
        echo $i
    done  
}


function update_table() {
  clear
  read -p "Enter the name of the table to update: " table_name

  if [ ! -f "$table_name.table" ]
  then
    echo "Table $table_name not found."
    return
  fi

  # read the column names and types from the table file
  read -r -a columns < "$table_name.table"
  read -r -a types < "$table_name.table"

  read -p "Enter the name of the column to update: " column_name

  # check if the column exists in the table
  if ! contains_element "$column_name" "${columns[@]}"
  then
    echo "Column $column_name not found in table $table_name."
    return
  fi

  read -p "Enter the new value for $column_name: " new_value

  read -p "Enter the condition to select rows to update: " condition

  # create a temporary file to write the updated rows to
  temp_file=$(mktemp)
  touch "$temp_file"

  # read each row from the table file
  while read -r line
  do
    values=($line)

    # evaluate the condition for the row
    if ! eval "$condition"
    then
      # write the row to the temporary file if it doesn't match the condition
      echo "${values[@]}" >> "$temp_file"
      continue
    fi

    # find the index of the column to update
    index=$(index_of_element "$column_name" "${columns[@]}")

    # update the value of the column
    values[$index]=$new_value

    # write the updated row to the temporary file
    echo "${values[@]}" >> "$temp_file"
  done < "$table_name.table"

  # move the temporary file to the table file to update the table
  mv "$temp_file" "$table_name.table"

}


Function select_from_table(){
  clear
  read -p "Enter the name of the table to select from: " table_name

  if [ ! -f "$table_name.table" ]
  then
    echo "Table $table_name not found."
    return
  fi

  # read the column names and types from the table file
  read -r -a columns < "$table_name.table"
  read -r -a types < "$table_name.table"

  # display the column names as the table header
  printf "| %-10s" "${columns[@]}"
  echo ""

  # display a separator row
  for ((i=0; i<${#columns[@]}; i++))
  do
    printf "+"
    printf -- "-%.10s" "-----------"
  done
  echo "+"

  # read and display each row from the table file
  while read -r line
  do
    values=($line)
    for ((i=0; i<${#values[@]}; i++))
    do
      printf "| %-10s" "${values[i]}"
    done
    echo ""
  done < "$table_name.table"

}


Function delete_from_table() {
  clear
  read -p "Enter the name of the table to delete from: " table_name

  if [ ! -f "$table_name.table" ]
  then
    echo "Table $table_name not found."
    return
  fi

  # read the column names and types from the table file
  read -r -a columns < "$table_name.table"
  read -r -a types < "$table_name.table"

  read -p "Enter the condition to delete rows by: " condition

  # create a temporary file to write the filtered rows to
  temp_file=$(mktemp)
  touch "$temp_file"

  # read each row from the table file
  while read -r line
  do
    values=($line)

    # evaluate the condition for the row
    if eval "$condition"
    then
      continue
    fi

    # write the row to the temporary file if it doesn't match the condition
    echo "${values[@]}" >> "$temp_file"
  done < "$table_name.table"

  # move the temporary file to the table file to update the table
  mv "$temp_file" "$table_name.table"

}


Function insert_into_table() {
  clear
  read -p "Enter the name of the table to insert into: " table_name

  if [ ! -f "$table_name.table" ]
  then
    echo "Table $table_name not found."
    return
  fi

  # read the column names and types from the table file
  read -r -a columns < "$table_name.table"
  read -r -a types < "$table_name.table"

  # prompt the user for the values to insert for each column
  values=()
  for ((i=0; i<${#columns[@]}; i++))
  do
    read -p "Enter a value for ${columns[i]} (${types[i]}): " value
    if ! validate_input "$value" "${types[i]}"
    then
      echo "Invalid input for ${columns[i]} (${types[i]})."
      return
    fi
    values+=("$value")
  done

  # append the values as a new line to the table file
  echo "${values[@]}" >> "$table_name.table"
  echo "Data inserted into table $table_name successfully."


}

Function list_tables {
  clear
  echo "Tables in $dbname:"
  ls *.table 2>/dev/null || echo "No tables found"

}


function create_table {
  read -p "Enter the name of the table: " tablename
  read -p "Enter the schema of the table (column1:type,column2:type,...): " schema
  touch $tablename
  echo $schema > $tablename
  echo "Table created successfully"

}

function drop_table (){
  clear
  read -p "Enter the name of the table to drop: " table_name

  if [ -f "$table_name.table" ]
  then
    rm "$table_name.table"
    echo "Table $table_name dropped successfully."
  else
    echo "Table $table_name not found."
  fi

}

